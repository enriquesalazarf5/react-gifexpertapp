{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGriditem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setcategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGriditem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","iamges","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAsBA,OACI,sBAAMC,SAhBW,SAACC,GAClBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,MASlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAzBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCPhBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEfC,EAFe,iDAEkCC,UAAWH,GAF7C,+DAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KAIFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAK1Ca,QAAQC,IAAIR,GAlBS,kBAqBdA,GArBc,4CAAH,sDCATS,EAAc,SAAC,GAAoB,IAAlBL,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGjC,OACI,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,QCHHS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAEtB,ECFwB,SAACA,GAEzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAsBA,OAhBAC,qBAAU,WAGN1B,EAAQC,GACH0B,MAAK,SAAAC,GAEFH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAKtB,CAACtB,IAGGuB,EDtBwBK,CAAc5B,GAAjC6B,EAAZ,EAAOtB,KAAae,EAApB,EAAoBA,QAGpB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAoDlB,IAEnDsB,GAAW,mBAAGJ,UAAU,mCAAb,qBAGX,qBAAKA,UAAU,YAAf,SAGOW,EAAOpB,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEfxBmB,EAAe,WAExB,MAAoC5C,mBAAS,CAAC,gBAA9C,mBAAO6C,EAAP,KAAmB9C,EAAnB,KASA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAGA,6BACK8C,EAAWtB,KAAI,SAAAT,GAAQ,OAAI,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCnB1DgC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.66d7b86c.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const AddCategory = ({ setcategories }) => {\r\n\r\n    const [inputValue, setinputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setinputValue(e.target.value);\r\n\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        //console.log('Submit hecho');\r\n\r\n        if (inputValue.trim().length > 2) {\r\n\r\n            setcategories(cats => [ inputValue, ...cats]);\r\n            setinputValue('');\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type='text'\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n                \r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setcategories: PropTypes.func.isRequired\r\n}\r\n\r\n\r\n","\r\n\r\n  export const getGifs = async ( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=l3lstgiPbuQTDPZPrqP106H9bAV92vE7`;\r\n\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    //debugger;\r\n    //en vez de que cada objeto tenga muchisimas propiedades con el map hacemos que cada objeto del arreglo tenga solo id title y url\r\n    //hasta ahi bien?sii\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n\r\n        }\r\n    })\r\n\r\n    console.log(gifs);\r\n    //aca estoyu actualizando el estado que sea un arreglo de objetos y cada objeto\r\n    //tiene id, title, url\r\n    return gifs;\r\n\r\n}\r\n\r\n","import React from 'react'\r\n\r\nexport const GifGriditem = ({ title, url }) => {\r\n\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n//import React, { useState, useEffect } from 'react'\r\nimport { GifGriditem } from './GifGriditem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    \r\n    const {data:iamges, loading} = useFetchGifs( category);\r\n  \r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\" >{category}</h3>\r\n\r\n            {loading && <p className=\"animate__animated animate__flash\" >Loading</p>}\r\n\r\n             \r\n             <div className=\"card-grid\">\r\n\r\n                {\r\n                    iamges.map(img => (\r\n                        <GifGriditem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n\r\n                    ))\r\n                }\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n\r\n        getGifs(category)\r\n            .then(imgs => {\r\n\r\n                setstate({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            })\r\n\r\n\r\n    }, [category])\r\n\r\n\r\n    return state; // Retorna = {data:[], loading: true }; = la informaciÃ³n que contiene\r\n\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setcategories] = useState(['Dragon Ball']);\r\n\r\n\r\n    //const handleAdd = () => {\r\n    //setcategories( ['Pollito Hermosa', ...categories] );\r\n    //setcategories( cats => ['Pollito Hermosa', ...cats] );\r\n\r\n    //}\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setcategories={setcategories} />\r\n            <hr />\r\n\r\n\r\n            <ul>\r\n                {categories.map(category => <GifGrid key={category} category={category} />)}\r\n            </ul>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n//Cuando se coloca <></> en lugar de un div\r\n//Se le llama un fragment y funciona ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}